using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

//you never commented this. good luck. 

namespace primageneratorx
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        public const int _widthRefsheet = 684;

        public const int _widthNonRefsheet = 342;

        public int _width;
        public const int _height = 321;

        //BASES
        public const string _base = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydE5SXWBlb2tweyKxTPqyPP/yANng4vlCFAAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAAC8RJREFUeF7tnNGy2zgORHc3yST7/x+cbbFbuDAp2ZZF3JK9fR5UIAiA5EmVa/KQ+ddfU4C1lmCtJVhrCdZagrWWYK0lWGsJ1lqCtZZgrSVYawnWWoK1lmCtJVhrCdZagrWW8Mla/72i9TdirSVYawkfrvVX4/vNWmsJ1lrC52iFu6wPMZ2SvPUNWGsJ1lrC22ht0ha03vL448ePyCCQ0ZVcXI21lmCtJbyT1v80EFAQvvTYLRkD6Uxw9xuw1hKstYT300qatwWoDLldjK90JpDUxEqstQRrLeGNtf7zzz/UFFAriBhBrmliv8OstZZgrSVcWitdRCyjK8jQbNDKRWgF2IoWLvHl2CKstQRrLeHqWn/+/NlULBbwpZ0Amc4saR0LNIsM61HMLtbwlAqstQRrLeHSWgEeD7Mhl3YySG6aJexCoOrvMmutJVhrCZfT2jwILqmVYEk7GSTvmAXLrOYRqKfYrLVaq7W+DN4phevvKdC6gaXErCBzXytpk27kMqODp2Kt1trAklICZKz1AXin/CW6JJb0QrDc1Ir8HlHAdp09D2u11hXqCLC01sfgnfKXWGSkPGI6BdyC2U5urulgC4ilzp6EtWqpsydhrVrq7Em8jdaRkEIWSbdyNwu0GMCWjp+BtQps6fgZWKvAlo6fwRW1AjxS8u7SRO3K7bbIZpJgS8efxlq/wJaOP421foEtHX+a99ZKUAzkpsEM0Hpgbwt53eAc1noD8rrBOaz1BuR1g3NcVCvAC6XtlsXWDnKT2EySvXodfw5rvQFJHX8Oa70BSR1/jutqBXikXK6EC/z3E/8qlcEuYQ3I8cjmLpI6/gTW2oOkjj+BtfYgqeNPcGmtAI+U0UYWsfxF6q5couoGW4DWZWat1Vqt9SRNyAadWSBPK9iV3UZXTFipxZZZZHSPV7FWa7XWk+Bhy0/pDpuyAPJUSe6bVdQYa5DRVV7CWhfGGmR0lZew1oWxBhld5SUuqhXgYbK4BXaBHKx0GSyf1ArGXt3jJaxVjL26x0tYqxh7dY+XuK5WgLcBidyCBRkYgTJaw3JP6yZdJZa6x3Gs9YuuEkvd4zjW+kVXiaXucZxLayV4XkZGt8AudOxpZfJ50KgbHMdad0GjbnAca90FjbrBcd5AK8ALgeTdBWWhFXS/rXmrYzOPXt3gINYqNvPo1Q0OYq1iM49e3eAg7/HbKmfPER47p4RmgdYrkUFLdCHQJQ5irSIyaIkuBLrEQaxVRAYt0YVAlzjI1bXiYbKV2ExmFjENxBQ0MpodwQTd4yDWeg9M0D0OYq33wATd4yBvoHWE7p5EhgZGrZisqIGlLnEca/0CkxU1sNQljmOtX2CyogaWusRxrq41k4Uudtdlzm+CAqlKdFpZgyTzWOrUl7BWwRprXYiYwR4oaOpusNaF7K7z2C33oLgMJQJsMWASS536Kta6gC0GTGKpU1/FWhewxYBJLHXqq7yf1lHimNkDlYBOg5xhgY48gbVa66qGQTBm9licWWuGDwYylNhM3oFzJHKFSR12GmsVTOqw01irYFKHneZttBK8XG5u2ctvwuLFYkIHTMJahQ6YhLUKHTCJd9KKx9PLSGwdqkGg0bOx1hKstYQP0Qq4e6gGgUbPxlpLsNYSPkfrnz9/UMCvUo28RExiqdGzsdYSrLWEj9JKurK8RIwCLayVWGsJ1lrCnlbkAZ2SXNnF466mT8VardVaK8g6MpTVwWJ8GeSyyADEmj4Va7VWa60g68iErw7m8SVMAsTqtFaQdWSysgzz+BImAWJ1WivIOjJZWYZ5fAmTALE6rRVkHZms7Bms9QZrLcFaSziqFXmi9Qoy6rRWkHVkRnEEeaL1CjLqtFaQdWRGcQR5ovUKMuq0VpB1ZEZxAMn/NsbdPAcx0RmTsFahMyZhrUJnTOIztSIDofynVp3ZPKSLQRxEuHwBaxWIQRxEuHwBaxWIQRxEuHyBt9fK9wNpa+II/60FzCLW3q3Wkda3NDIgOv4I1npD67NWaz0PXqjXN/hmLZJf2gSMu59XBGrYgV3dHN3gaay1h13dHN3gaay1h13dHN3gad7+t3UPFAehFV9t79M6vrDWG5oTYa33wPP09CdoToS13gPP09OfYPlRXEHj8rP6nFZAmwQx0A2exlo3QJk6rbVDVhpotNZt8DY+mC9/BolZtdLOwwkoIGpu7bzD81hrDwqImq21Q1asdQ88LN7M4BkWNw06BTEto+oVZMImY3zZ+DzWaq3WOhG8Si8+opVqAFrih3UTbAXsRRC9QHVHsFZrtdZZ8GF8LWEGaL0Py+D0vtYMWzLaOIi13sCWjDYOYq03sCWjjYNcUase1JChLVQxwN34caTWqNcZxVhrCdZawkW1Us0z0FqG+ohS6/+aQdl6udZagrWWcEWtAC+niIdI2xOoocnVMWVYawnWWsJFf1tDawSbSNhzoJ6TdUwl1lqCtZZwOa18Oa09RMKeBi3W+hjZehq0WOtjZOtp0PL/q5XKwJ7fyMMUYip7CCvZrsPKsNYSrLWEa2kNXwhyPAYgy7pPLg50ZA3WWoK1lnA5rUE22MX4/vr1C9+s7A5L21qMRoJYpxZgrSVYawnX0hrgzVlfjhkQLgH17YGCKGYjwVLnzcZaS7DWEq6rNRTkGOSYICN/O4wtBHmdNxtrLcFaS7ioVhAuGCj7929kMshI4cBYnMGu5k7FWq21EZkMMrI4MBZnsKu5U7nub2s8G19lVyIfYCmLA11lB3Y1dCrWaq0rkQ+wlMWBrrIDuxo6lQ/X2pVtghrNnYe1WutK5AMsJfKWrmwT1GjuPC6tlV+lErGVQUYuE2PZCGo0dx7Waq0rsZVBRi4TY9kIajR3Hp+sdazZA5UaPQlrXUClRk/CWhdQqdGT+EytiMeCO6BYoydhrQso1uhJWOsCijV6Eh+lNYgMg4egUqMnYa0LqNToSVjrAio1ehIfpZW7eWss2yPap2CtItqnYK0i2qfwgVpB7I5le+T281iryO3nsVaR289zaa18Lb7KNiLZkb3kgs3ikdx+HmsVuf081ipy+3neQytgnvGmqc5Lrtms7+jaT2Ktoms/ibWKrv0kF9UKwkUnZdPRppRcudkVbLafwVoXNtvPYK0Lm+1neAOtAHGg1C3Iq+2WXN+6j7W/jLUuIK+GSVjrAvJqmMR7aH3InpdFZEN1W39CCFQ9D2u11n321CzyGqqz1nj2Q+54wVb8L92BGlaYVOlUrNVad7ijBlvW+gVeSxcScJc9NTGkiV1AnFFdAdZagrWWcEWtfHOIkLwdUKC2W2ICyDHZ65qFtZZgrSVcVCtfHgqALCaYV88AdzkBcBkwo9ICrLUEay3hDbSSRcYtqt4BBb9//2alRiSYV2kB1lqCtZZwXa3xeMYBMqp7BCrDbAfy3FLpbKy1BGst4aJagSyucjOqewQqqe8Oz087hLVa64rqHoFKydvn+WmHuKhWPlhebzkkojOLJdG6gaWq52Gt1to4ZGE0SLRuYKnqeVxRK+DLm4ENWBCwZRPs0h1ArD+Z9mejbOP+kBew1oX7Q17AWhfuD3mBS2vdIwsC96XEqLGLeYIlUM9prFVgCdRzGmsVWAL1nOYTtII7RjhKdbfEKQgAM2o7h7VqIGBGbeewVg0EzKjtHBfVCvBCvnkTWqCICNQ5EDUBM/iSLqm2E1jrQpdU2wmsdaFLqu0E76oVhIUI1DnAggBLthNmYguo7QTWaq23oCBEMFDnAAsCLNlOmIktoLYTvKVWPh5QBIsZ7IFdigMsjlGRjC31nMBarXWFjwcUwWIGe2C32VtgcYyKZGyp5wTX1Qrwwng8YwYgFABVP0LV6Y8heGHafax1wVqFtb4OHhla+XJ8u0Cl58CcWaOItS5gzqxRxFoXMGfWKHJprYAPBuExB/iq7mJYawnWWsLVtQbhMQdA2xfDWkuw1hLeSSuJmPlrYq0lWGsJb6P1vbDWEqy1BGstwVpLsNYSrLUEay3BWkuw1hKstQRrLcFaS7DWEqy1gL9//weJPjTZ3AfYWgAAAABJRU5ErkJggg==";
        public const string _tail1 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe9ng4gbIYrgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABIFJREFUeF7t0dty2zYUQNFe/v+bXZgH5tCy4ihtdmpl1nrQEIcgJG798UJA1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWRM/lvXPT+1NyBqRNfFo1gn396dmz9iPHfboMtzr3/efkDUha+I7WffbH3a8D/46nBdjHjkPmZ3n8O5kHE88PVkTsia+mXVeckd6y3Q1XZbZcL0ea7m3vv9L9ugyvC7Xxf4Fz0zWhKyJ+1nXu+02h5vleC1xmByfuLvnZnguX098s3/NE5I1IWviTtb1Prvcm4+T5Ry+BjhMl8ddH7n7+Bru3/RsZE3Imngo6/JxeHey7CQfrA376oN5fC/eWwfun/VUZE3Imrif9XNTYblej9mwkzxsP/xWdi8Oazln7h/3JGRNyJq4k/W75j3Hfvs3M5lb0+hq9uzFe+etubhawzlwf/0zkDUha+LfZD3N2+63P1yXc3c5uj1qP3yxhuuQdTGn7e/+2mRNyJr4T1nHvO0kOC9Oc/c07T63nzys5XpqL47T9rd+bbImZE38hKzjiPb6/vN5OoeT7KO5NZuXGV5dD1zX+/u+NlkTsiZ+WtaxXvtaYZnlzJed6nCdzOblZs+yJuet/TVfnqwJWRM/Oet4rXVpMRdjbo1Z7niHm+WYnbN5f8GXJ2tC1kSSdawKU2Q+r875Lne0G3t92CNZr84i83l1znc/WR93FpnPq3O++8n6o65dTjOZW+Oc3605n/vEZyBrQtZEnnUcld7FvVmO2bbs9ZsZ7rOegawJWRO/KOuYOuOMNeFuXDeMfcSTkDUha+KXZr3atT61tz4hWROyJv63rL83WROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZA28vPwDTPTIQSdDSE0AAAAASUVORK5CYII=";
        public const string _tail2 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe9ng4gbIYrgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABAVJREFUeF7t0NFuGzcQQNG2/v9vdiciJaiO7TT2XjlrnPsgcClyCJy/nhWENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlr0qdY/762v3UNaxLWpI+zjubT09M/l8i+CGsS1qRjWCey92FNwpp0GOtE9hbWJKxJn2Ul+2pYk7AmHcw6zT5crElYkw5gnbboXb+Lu85P+/vkYU3CmlSxrpbUO+1Zl2m3K3vrzGFNwpr0cdZpCLbr27Lv94P2rtvmGr4WZwxrEtakL2Z90Qy8LdZ6fvdjpwprEtakw1inJXJUi3Ut9nvnCWsS1qRPsU5kXw1rEtakg1mnBXF489CJcLEmYU36LOv0SNn95B8f1iSsSQewTj/LThvjoE5kOmFNwpp0DOuUyp7LdMKahDXpMNbpVdnV5vlQpzOdsCZhTTqSdRqCY3HXwD39PGFNwpp0MOtqWWzLX7X97lrXV3vi2cKahDUpYV1tmHd9N+R/myt7xGnDmoQ1KWS9tXCnbXltK16735nD+/I5w5qENekRrLcW7rRYX7RFL6bTvnPOsCZhTXoQ65K6b1te26LfwnTCmoQ16XGs2+9XfQPTCWsS1qQHsU7/R/Z7mE5Yk7AmPY51GrXVVvyp/felfeecYU3CmvRQ1ltb7l3fffScYU3CmvQ1rNM7ptPF/MSyWJOwJn0B6yLbfm+H9ffCmoQ16S3T+/1Tm05Yk7AmfQHrNGov2pzXZmcfPWdYk7AmfQ3rfS9ML8g/2n+fM6xJWJP+CNb79u7Jw5qENenrWb9lWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwBj0//wsOznDSjLXurQAAAABJRU5ErkJggg==";
        public const string _tail3 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADgycTsydDg7dGtwe9ng4gvh4AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABIhJREFUeF7t1NFS20AUBNGEhP//ZHLZO1JtGWMMVttZ6PNgpFlLruoHfr0IYFaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRE3ZX3a5F4bsyLMivh61qr5/Pz8d7DsCbMizIo4Jmux7MysCLMiDstaLLszK8KsiFuzWvYssyLMijg4a6nduGZFmBVxQNaSoptaPhu3v19yvzizIsyKOD5rpjGOUH/GZ/mdv0Pf5F3T2+ZxXWZFmBXx9axlb1G6aTl7W3I/ZNr+Be/2sV/eFysyK8KsCCRrrj5qWjJt4/7CkfSp9vrMjy3FrAizIg7LWjrQLAfnQpdMQ6ZNLZ21L/J76zArwqyIm7KWy2Xfjr2U3A+ZNllXLmtWhFkRB2ctHaK9t5TcD5mGTJPe64cWimtWhFkRt2YtF8rO16VPS+6HTEOmSQ7GkVljvi59WnI/ZBoyTXJg1tJFynxd+rTkfsg0ZJrk4AdmLW/Llu4yy8HVWbOu1rSYFWFWxDFZyzVlL4wl95usw1pNi1kRZkUclrWcLdvmUn3demmZNlkXbFrMijAr4sispRJciNuSbcg0ZBoyjaYlb1+HWRFmRRyctXWLhLlOcg79eMsbV2NWhFkRSNaWMNf1TdGhHskrlmVWhFkRYNZdxy1JuKmC+8Wul/pyHl6TWRFmRdwj667jlm53Ym5a8syazIowK+JOWbvUrAvuXv+tjqx9mseWZVaEWRH3y9r5PvQNmhazIsyKuFPWck3Z79G0mBVhVsT9spaq1lLxjRwPeWZNZkWYFXHXrLuUu9g3X12TWRFmRTwma7nQtIzmC5c1K8KsiAdk7WTp9z6zfo5ZEWZFvNd03pduWsyKMCviAVlLVTuRnJta8tU1mRVhVsRjss5Omo7Ir3K8JrMizIr4L7LOsi7OrAizIh6f9VsyK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsCLMizIowK8KsgJeXf0XanGfiyPnqAAAAAElFTkSuQmCC";
        public const string _tail4 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe9ng4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIbIYrgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABCBJREFUeF7t0e1O4zoUQNE7d97/mZlQHyJE+UgLGxS01g8UOT5OvfnvgYCsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE2EWf+8azY9mdWr9ZOSNSFr4ouzTpuLv++aTU8dt4d9fa2cmqwJWRNfk/XS59FKc5OZvNhX9jPX+acja0LWxGezrsuvHJ+3H7Ufu/2dL52KrAlZE/dn3W8e2Q/fHuaT5yFrQtbEPVkvPcOgu/0r28N8+yRkTciauDnr9wS99vifPE9cWROyJm7L+lNNF1kTsiZ+Z1ZNj5M1IWviaFZNbyJrQtbEoazvNP3/sBm43emabmRNyJq4M+ukut3MH7Z9WtaPzfxhsh4y84f92qwvmk6eT5iD3rZSLvMjzkbWhKyJ27JOmGfW5a/N67fNia/ZxufbpyVrQtbEDVmnx8Ul3aPZdGVev9Z3nfa+bXAOOidZE7ImPsi6XW/dc5I8BZ3XB6z9M/xknfmWNTLz5yRrQtbEbVnvvu02uE64ts7fPRY9edONrAlZE4eyrvvffdtLqLGOemEFXbY9M3ZmsiZkTRzNevdt30r5qt/RdCNrQtbEB1k321U/c9s1vply75qtFzN/TrImZE18nPWrTK1npuVrtrczdk6yJmRNfF/W5cOgy9o2Mycka0LWxLdmPRJ0J+tRsiZkTWylrk3FS8d5OnnTjawJWRPfmvWF1fEx7bOgy7Yym85J1oSsiR/OukzLi1mS9W7TT9avNf1kLUzFJ7N6crImZE38fNZfSdaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErAlZE7ImZE3ImpA1IWtC1oSsCVkTsiZkTciakDUha0LWhKwJWROyJmRNyJqQNSFrQtaErIGHh3+FtZxcrnD/4AAAAABJRU5ErkJggg==";
        public const string _tail5 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAADsydGtwe6enp9ng4gqIVbkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAABJVJREFUeF7t1N122jAQAOG2yfu/crp4F9XYxD9qhhM5811wJFlYaC749SGAWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVaEWRFmRZgVYVbEd8n6+67mgzMrwqyIb5T1z+QaZc2KMCviRVkj1oa2YV42V6Zvj8esCLMiXpc1kz2VBWsyaSvxWa8YilkRZkW8KGtopQ5qm2NQrxiHWRFmRXxZ1inaUdlrV9sZgzpmEGZFmBXxv1mnSjd5/4O6v1KnfntmRZgV0Z8171mXfgmzIsyKuHjW1wcNAzUNZkWYFXE66+uDhrGaBrMizIroybpWt2fE++vscZgVYVbE6awpa4a6OiZPqVPHYVaEWRGd/611aUYekerU0ZgVYVbEuaxxz7o6adyajVkRZkWcyBq3fX9/r6vDRi9rVoRZEUezZtNUV8fEWWb9emZF/JSs86ZNNfhqF2gazIowK+Jo1rr0pLoyZS/QNJgVYVbEfta459OI85X10z7XaBrMijAr4kTWULe/m6+sn3aIs5o6fkxmRZgVsZM1rjf1/KcCrGw86mDWsvGog1nLxqMO189aF53CpZo/2ni0a35KipVQP2JAZkWYFXEia9PyLTr2ZX16RDBrMWtjVsRW1s8uHJ6WPZ413tzU0mPfGNePGJNZEWZFnM66aBfT+cri6dot5D3Z0/entmdQZkWYFbGTNauFuu5kPV2sLNxC3tWrP2+a20LtG5NZEWZFHM2a6uqPKXMcm3PaTHFu6nUzsbjY09SOwZkVYVbEuawhcyzGuTOnYeqzFSg3hJpfjlkRZkWczhoy3Hyc0ynpbVrf/8HMijAroidrrL+9vbVx22nTxqwIsyJOZ43FkFljMN/ZpjIrwqyInqzxGVnnEWM8n8qsCLMizmVtK+usNdLErAizIk5kjWlbiUFt0jNmRZgV0ZM1PmuHPmFWhFkRW1lDdmwpzXqQWRFmRZzOmgNtMyvCrIhDWU15llkRZkXsZ7VpB7MizIrYyao+ZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFWFWhFkRZkWYFfDx8RcZtAVVoMeqHAAAAABJRU5ErkJggg==";
        public const string _leg1 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAE5SXfqyroFg8AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAAAwNJREFUeF7t0MFtA0EMBEHb+ed8Pp0oQAkUsAS6XrucX/9cAcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZiTVZfz/mf7ayEmUldmSdoh9zPVhZibISZSXKSpSVWJB1Wn6Z4WB7sv7d5jnDwcpK7Mj6Kvpkfaed4WBlJcpKlJUoK1FWoqxEWYmyEjuyvjxZ32Y4WFmJPVm/zHCwshJlJcpKLMh6m5yPOZ2trERZiR1Zb4ua3spKlJVYk3WXshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYmyEmUlykqUlSgrUVairERZibISZSXKSpSVKCtRVqKsRFmJshJlJcpKlJUoK1FWoqxEWYHr+geNPldafofKmQAAAABJRU5ErkJggg==";
        public const string _leg2 = "iVBORw0KGgoAAAANSUhEUgAAAVYAAAFBCAMAAAAboneSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAE5SXfqyroFg8AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAAAw9JREFUeF7t0DGOwzAQBEFL//+zTvatAudugASqE4I7Wb0uBWFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSduwHk/zXzusSViT9mAd0ae5LhzWJKxJWJOwJmFN2oB1LI/jnBfrLxrL4zwf1xkWDmvSPqy36uM6w8JhTcKatA3rR3VcZ1g4rEm7sI7qv+sMC4c1aRPWMX2H9TdhTXqzfjfDwmFNwpqENQlrEtakDVjvhvPTnNYOaxLWpD1Y7zYyvcOahDVpG9a9wpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYU3CmoQ1CWsS1iSsSViTsCZhTcKahDUJaxLWJKxJWJOwJmFNwpqENQlrEtYkrElYk7AmYQ26rj8tGFc8tCjLDAAAAABJRU5ErkJggg==";
        public const string _wings = "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";

        public Bitmap builtTemplate;

        public Color baseprimary = ColorTranslator.FromHtml("#6b707b");
        public Color basesecondary = ColorTranslator.FromHtml("#d9e0e2");
        public Color basehighlight = ColorTranslator.FromHtml("#fab23c");

        public Color PRIMARY;
        public Color SECONDARY;
        public Color HIGHLIGHT;
        public Color FEET;
        public Color LEGS;
        public Color FACE;
        public Color WEIRD;

        public Color ct = Color.FromArgb(240, 240, 240);

        public string batchPath;

        public bool doColourBoxes = false;
        public bool doColourLines = false;

        private void button1_Click(object sender, EventArgs e)
        {
            string dim = textBox1.Text + "x" + textBox2.Text;

            try
            {
                Thread a = new Thread(() => doPrima(dim, true, true, null));
                a.IsBackground = true;
                a.Start();
            }
            catch
            {
                doPrima("1x1", true, true, null);
            }
        }

        public Bitmap bitmapFromB64(string base64)
        {
            byte[] byteBuffer = Convert.FromBase64String(base64);
            MemoryStream memoryStream = new MemoryStream(byteBuffer);
            memoryStream.Position = 0;
            Bitmap ret = (Bitmap)Bitmap.FromStream(memoryStream);
            memoryStream.Close();
            memoryStream = null;
            byteBuffer = null;
            return ret;
        }

        public void createBase()
        {
            if (RefCheck.Checked)
            {
                builtTemplate = new Bitmap(_widthRefsheet, _height);
            }
            else
            {
                builtTemplate = new Bitmap(_width, _height);
            }

            Random rnd = new Random();
            bool wings = rnd.NextDouble() >= 0.5;
            int legDesign = rnd.Next(1, 3);
            int tailDesign = rnd.Next(1, 6);

            Graphics g = Graphics.FromImage(builtTemplate);

            if (wings){g.DrawImage(bitmapFromB64(_wings), 0, 0);}

            g.DrawImage(bitmapFromB64(_base), 0, 0);

            switch (tailDesign)
            {
                case 1:
                    g.DrawImage(bitmapFromB64(_tail1), 0, 0);
                    break;

                case 2:
                    g.DrawImage(bitmapFromB64(_tail2), 0, 0);
                    break;

                case 3:
                    g.DrawImage(bitmapFromB64(_tail3), 0, 0);
                    break;

                case 4:
                    g.DrawImage(bitmapFromB64(_tail4), 0, 0);
                    break;

                case 5:
                    g.DrawImage(bitmapFromB64(_tail5), 0, 0);
                    break;
            }

            switch (legDesign)
            {
                case 1:
                    g.DrawImage(bitmapFromB64(_leg1), 0, 0);
                    break;

                case 2:
                    g.DrawImage(bitmapFromB64(_leg2), 0, 0);
                    break;
            }




        }

        private string getName()
        {
            if (textBox3.Text == "$rand")
            {
                try
                {
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                    WebClient w = new WebClient();
                    byte[] dat = w.DownloadData("https://namey.muffinlabs.com/name.json?type=surname");
                    string name = System.Text.Encoding.UTF8.GetString(dat);
                    name = name.Substring(2, name.Length - 4);
                    return name;
                }
                catch(WebException ex)
                {
                    Console.WriteLine(ex.Message);
                    return "apiError";
                }
            }
            else
            {
                return textBox3.Text;
            }
        }

        public Bitmap doPrima(string dim, bool doDisplayProc, bool doProgressProc, MouseEventArgs mev)
        {
            if (RefCheck.Checked)
            {
                _width = _widthRefsheet;
            }
            else
            {
                _width = _widthNonRefsheet;
            }

            String[] dimr = dim.Split('x');
            int dimx = Int32.Parse(dimr[0]);
            int dimy = Int32.Parse(dimr[1]);
            int numOfPrimas = dimx * dimy;

            if (doProgressProc)
            {
                this.Invoke(new MethodInvoker(delegate ()
                {
                    progressBar1.Maximum = numOfPrimas;
                }));
            }

            Size psize = new Size(_width, _height);
            Size mSize = getPrimSize(dim);
            Size newPrimaSize = getPrimSize(dim);
            List<Point> positions = getAllPositions(dim);
            Bitmap BaseBmp = new Bitmap(newPrimaSize.Width, newPrimaSize.Height);
            Graphics gr = Graphics.FromImage(BaseBmp);

            int count = 0;

            foreach (Point p in positions)
            {

                this.Invoke(new MethodInvoker(delegate ()
                {
                    if (comboBox1.Text == "Wheel")
                    {
                        doGraphicShit(mev);
                    }
                }));

                Bitmap prima = GetNewPrima(true);

                Graphics graphics = Graphics.FromImage(prima);

                if (RefCheck.Checked)
                {
                    Bitmap primabitmapmirror = new Bitmap(prima);
                    primabitmapmirror.RotateFlip(RotateFlipType.RotateNoneFlipX);

                    graphics.DrawImage(primabitmapmirror, 0, 0);
                }

                if (checkBox2.Checked)
                {
                    string primaName = getName();
                    Font lucFont = new Font("Lucida Console", 14);
                    SizeF size = graphics.MeasureString(primaName, lucFont);

                    if (RefCheck.Checked)
                    {
                        float min = size.Width / 2;
                        int minint = (int)min;

                        Point point = new Point(342 - minint, 0);

                        RectangleF rect = new RectangleF(point, size);

                        rect.Height = rect.Height + 1;
                        graphics.FillRectangle(Brushes.Black, rect);
                        point.Y = point.Y + 2;
                        graphics.DrawString(primaName, lucFont, Brushes.White, point);
                        graphics.Dispose();
                    }
                    else
                    {
                        Point point = new Point(0, 0);

                        RectangleF rect = new RectangleF(point, size);

                        rect.Height = rect.Height + 1;
                        graphics.FillRectangle(Brushes.Black, rect);
                        point.Y = point.Y + 2;
                        graphics.DrawString(primaName, lucFont, Brushes.White, point);
                        graphics.Dispose();
                    }

                    
                }

                gr.DrawImage(prima, p);
                count++;

                if (doProgressProc)
                {
                    this.Invoke(new MethodInvoker(delegate ()
                    {
                        progressBar1.Value = count;
                    }));
                }
                if (checkBox1.Checked){
                    this.Invoke(new MethodInvoker(delegate ()
                    {
                        pictureBox1.Image = BaseBmp;
                    }));
                }
            }

            if (doDisplayProc)
            {
                this.Invoke(new MethodInvoker(delegate ()
                {
                    pictureBox1.Image = BaseBmp;
                }));
            }

            return BaseBmp;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            doPrima("1x1", true, false, null);
            INIT_COLOUR_WHEEL();
        }

        public Color randcolour()
        {
            Random rnd = new Random();
            Color outlir = Color.FromArgb(getRandom(1, 255), getRandom(1, 255), getRandom(1, 255));
            return outlir;
        }

        static Random rnd = new Random();

        public int getRandom(int min, int max)
        {
            return rnd.Next(min, max);
        }

        public static List<Color> getSimilarColours(int brlim, int similarity, int colourNum)
        {
            if (brlim > 255)
            {
                throw new System.ArgumentException("brightness limit must be under 255");
            }

            List<Color> colours = new List<Color> { };

            Color seed = Color.FromArgb(rnd.Next(brlim, 255), rnd.Next(brlim, 255), rnd.Next(brlim, 255));

            for (int i = 0; i < colourNum; i++)
            {
                int[] newValues = new int[] { 0, 0, 0 };

                //red
                int spaceRedUp = seed.R + similarity;
                int spaceRedLow = seed.R - similarity;

                int modifRed = rnd.Next(0, similarity);

                if (rnd.NextDouble() >= 0.5)
                {
                    //adding
                    newValues[0] = seed.R + modifRed;
                    if (newValues[0] > 255)
                    {
                        newValues[0] = 255;
                    }
                }
                else
                {
                    //subtracting
                    newValues[0] = seed.R - modifRed;
                    if (newValues[0] < brlim)
                    {
                        newValues[0] = brlim;
                    }
                }

                //Green
                int spaceGreenUp = seed.G + similarity;
                int spaceGreenLow = seed.G - similarity;

                int modifGreen = rnd.Next(0, similarity);

                if (rnd.NextDouble() >= 0.5)
                {
                    //adding
                    newValues[1] = seed.G + modifGreen;
                    if (newValues[1] > 255)
                    {
                        newValues[1] = 255;
                    }
                }
                else
                {
                    //subtracting
                    newValues[1] = seed.G - modifGreen;
                    if (newValues[1] < brlim)
                    {
                        newValues[1] = brlim;
                    }
                }

                //Blue scaramucci
                int spaceBlueUp = seed.B + similarity;
                int spaceBlueLow = seed.B - similarity;

                int modifBlue = rnd.Next(0, similarity);

                if (rnd.NextDouble() >= 0.5)
                {
                    //adding
                    newValues[2] = seed.B + modifBlue;
                    if (newValues[2] > 255)
                    {
                        newValues[2] = 255;
                    }
                }
                else
                {
                    //subtracting
                    newValues[2] = seed.B - modifBlue;
                    if (newValues[2] < brlim)
                    {
                        newValues[2] = brlim;
                    }
                }

                Color newColour = Color.FromArgb(newValues[0], newValues[1], newValues[2]);

                colours.Add(newColour);
            }

            return colours;

        }

        public List<Point> getAllPositions(string dim)
        {
            List<Point> points = new List<Point> { };

            string[] dimxy = dim.Split('x');
            int x = Int32.Parse(dimxy[0]);
            int y = Int32.Parse(dimxy[1]);

            for (int i = 0; i < x; i++)
            {
                for (int o = 0; o < y; o++)
                {
                    points.Add(new Point(_width * i, _height * o));

                }
            }

            return points;
        }

        public Size getPrimSize(string dim)
        {
            string[] dimxy = dim.Split('x');
            int basex = _width;
            int basey = _height;
            int x = Int32.Parse(dimxy[0]);
            int y = Int32.Parse(dimxy[1]);
            return new Size(basex * x, basey * y);
        }

        public bool isBlack(Color n, double brlim)
        {
            if(n.GetBrightness() < brlim){
                return true;
            }
            else
            {
                return false;
            }
        }

        public void getColoursSan(bool doWheelGen)
        {
            this.Invoke(new MethodInvoker(delegate ()
            {
                if (comboBox1.Text == "RandNice")
                {
                    List<Color> lc = getSimilarColours(75, 25, 7);
                    PRIMARY = lc[1];
                    SECONDARY = lc[2];
                    HIGHLIGHT = lc[3];
                    FEET = lc[2];
                    LEGS = lc[4];
                    FACE = lc[6];
                    WEIRD = lc[0];
                }
                else if (comboBox1.Text == "Random")
                {
                    PRIMARY = randcolour();
                    SECONDARY = randcolour();
                    HIGHLIGHT = randcolour();
                    FEET = randcolour();
                    LEGS = randcolour();
                    FACE = randcolour();
                    WEIRD = randcolour();
                }
                else if (comboBox1.Text == "Wheel" && doWheelGen == true)
                {

                }
                else if (comboBox1.Text == "Wheel" && doWheelGen == false)
                {

                }

                //if any of the colours are black (or very dark), redo the colour generation (for random and randnice only)
                List<Color> colours = new List<Color> { PRIMARY, SECONDARY, HIGHLIGHT, FEET, LEGS, FACE, WEIRD };
                foreach(Color c in colours)
                {
                    if (isBlack(c, 0.2))
                    {
                        getColoursSan(doWheelGen);
                        break;
                    }
                }
            }));
        }

        public Bitmap GetNewPrima(bool doWheelGen)
        {
            Bitmap drawn = new Bitmap(_width, _height);

            Color basefeet = Color.FromArgb(255, 242, 0);
            Color baselegs = Color.FromArgb(34, 177, 76);
            Color baseface = Color.FromArgb(78, 82, 93);
            Color baseweird = Color.FromArgb(78, 82, 93);

            Color normallegs = Color.FromArgb(240, 247, 249);
            Color normalface = Color.FromArgb(78, 82, 93);

            Random rnd = new Random();
            createBase();
            Bitmap primabitmap = builtTemplate;

            getColoursSan(doWheelGen);

            SolidBrush pr = new SolidBrush(PRIMARY);
            SolidBrush se = new SolidBrush(SECONDARY);
            SolidBrush hl = new SolidBrush(HIGHLIGHT);
            SolidBrush fe = new SolidBrush(FEET);
            SolidBrush le = new SolidBrush(LEGS);
            SolidBrush fa = new SolidBrush(FACE);
            SolidBrush we = new SolidBrush(WEIRD);

            SolidBrush len = new SolidBrush(normallegs);
            SolidBrush fan = new SolidBrush(normalface);
            SolidBrush wen = new SolidBrush(normallegs);

            Graphics g = Graphics.FromImage(primabitmap);
            Graphics drawing = Graphics.FromImage(drawn);
            int y = primabitmap.Height;
            int x = primabitmap.Width;

            for (int i = 0; i < x; i++)
            {
                for (int o = 0; o < y; o++)
                {
                    Color p = primabitmap.GetPixel(i, o);
                    SolidBrush old = new SolidBrush(p);

                    if (p == baseprimary)
                    {
                        drawing.FillRectangle(pr, i, o, 1, 1);
                    }
                    else if (p == basesecondary)
                    {
                        drawing.FillRectangle(se, i, o, 1, 1);
                    }
                    else if (p == basehighlight)
                    {
                        drawing.FillRectangle(hl, i, o, 1, 1);
                    }
                    else if (p == basefeet)
                    {
                        drawing.FillRectangle(fe, i, o, 1, 1);
                    }
                    else if (p == baselegs)
                    {
                        drawing.FillRectangle(le, i, o, 1, 1);
                    }
                    else if (p == baseface)
                    {
                         drawing.FillRectangle(fan, i, o, 1, 1);
                    }
                    else if (p == baseweird)
                    {
                        drawing.FillRectangle(we, i, o, 1, 1);
                    }
                    else
                    {
                        drawing.FillRectangle(old, i, o, 1, 1);
                    }

                }
            }

            return drawn;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog dlg = new SaveFileDialog())
            {
                dlg.Title = "Save";
                dlg.Filter = "Png files | .png";

                if (dlg.ShowDialog() == DialogResult.OK)
                {
                    Bitmap b = (Bitmap)pictureBox1.Image;
                    b.Save(dlg.FileName, ImageFormat.Png);

                }
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Form info = new info();
            info.Show();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            using (var fbd = new FolderBrowserDialog())
            {
                DialogResult result = fbd.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(fbd.SelectedPath))
                {
                    batchPath = fbd.SelectedPath;
                }
            }
        }

        public void doPrimaBatch()
        {
            for (int i = 0; i < numericUpDown1.Value + 1; i++)
            {
                Bitmap cur = doPrima("1x1", false, false, null);
                cur.Save(batchPath + "/prim" + i + ".png", ImageFormat.Png);
                this.Invoke(new MethodInvoker(delegate ()
                {
                    label3.Text = i + "/" + numericUpDown1.Value;
                    progressBar1.Maximum = (int)numericUpDown1.Value;
                    progressBar1.Value = i;
                }));

                Thread.Sleep(10);
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            if(batchPath != "")
            {
                numericUpDown1.Enabled = false;
                button4.Enabled = false;
                button5.Enabled = false;
                checkBox1.Checked = false;
                checkBox1.Enabled = false;

                Thread a = new Thread(() => doPrimaBatch());
                a.IsBackground = true;
                a.Start();
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            textBox3.Text = "$rand";
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            button6.Enabled = !button6.Enabled;
            textBox3.Enabled = !textBox3.Enabled;
        }

        //COLOUR WHEEL HERE \/\/\/\/

        public Bitmap b = new Bitmap(310, 310);
        public Bitmap back = new Bitmap(310, 310);
        public bool size = true;

        private void INIT_COLOUR_WHEEL()
        {
            Graphics g = Graphics.FromImage(b);
            Graphics o = Graphics.FromImage(back);
            DrawColorWheel(g, Color.Black, 0, 0, 309, 309);
            DrawColorWheel(o, Color.Black, 0, 0, 309, 309);
            pictureBox2.Image = b;
            doGraphicShit(null);
        }

        //wheel drawing and interpolateColors function by csharphelper.com
        private void DrawColorWheel(Graphics gr, Color outline_color, int xmin, int ymin, int wid, int hgt)
        {
            Rectangle rect = new Rectangle(xmin, ymin, wid, hgt);
            GraphicsPath wheel_path = new GraphicsPath();
            wheel_path.AddEllipse(rect);
            wheel_path.Flatten();

            float num_pts = (wheel_path.PointCount - 1) / 6;
            Color[] surround_colors = new Color[wheel_path.PointCount];

            int index = 0;
            InterpolateColors(surround_colors, ref index, 1 * num_pts, 255, 255, 0, 0, 255, 255, 0, 255);
            InterpolateColors(surround_colors, ref index, 2 * num_pts, 255, 255, 0, 255, 255, 0, 0, 255);
            InterpolateColors(surround_colors, ref index, 3 * num_pts, 255, 0, 0, 255, 255, 0, 255, 255);
            InterpolateColors(surround_colors, ref index, 4 * num_pts, 255, 0, 255, 255, 255, 0, 255, 0);
            InterpolateColors(surround_colors, ref index, 5 * num_pts, 255, 0, 255, 0, 255, 255, 255, 0);
            InterpolateColors(surround_colors, ref index, wheel_path.PointCount, 255, 255, 255, 0, 255, 255, 0, 0);

            using (PathGradientBrush path_brush = new PathGradientBrush(wheel_path))
            {
                path_brush.CenterColor = Color.White;
                path_brush.SurroundColors = surround_colors;

                gr.FillPath(path_brush, wheel_path);

                using (Pen thick_pen = new Pen(outline_color, 2))
                {
                    gr.DrawPath(thick_pen, wheel_path);
                }
            }
        }

        private void InterpolateColors(Color[] surround_colors, ref int index, float stop_pt, int from_a, int from_r, int from_g, int from_b, int to_a, int to_r, int to_g, int to_b)
        {
            int num_pts = (int)stop_pt - index;
            float a = from_a, r = from_r, g = from_g, b = from_b;
            float da = (to_a - from_a) / (num_pts - 1);
            float dr = (to_r - from_r) / (num_pts - 1);
            float dg = (to_g - from_g) / (num_pts - 1);
            float db = (to_b - from_b) / (num_pts - 1);

            for (int i = 0; i < num_pts; i++)
            {
                surround_colors[index++] = Color.FromArgb((int)a, (int)r, (int)g, (int)b);
                a += da;
                r += dr;
                g += dg;
                b += db;
            }
        }

        private void doGraphicShit(MouseEventArgs mev)
        {
            int baseSize = trackBar1.Value * 10;

            Random rnd = new Random();

            Point e = new Point();
            if (mev != null)
            {
                e.X = mev.X;
                e.Y = mev.Y;

                //buffer around selectable area
                if(e.X > 302)
                {
                    e.X = 302;
                }

                if(e.Y > 302)
                {
                    e.Y = 302;
                }

                if (e.X < 8)
                {
                    e.X = 8;
                }

                if (e.Y < 8)
                {
                    e.Y = 8;
                }

            }
            else
            {
                e = new Point(rnd.Next(30, 280), rnd.Next(30, 280));
            }

            Graphics g = Graphics.FromImage(b);

            Brush ctr = new SolidBrush(ct);
            g.FillRectangle(ctr, 0, 0, 310, 310);
            g.DrawImage(back, 0, 0);
            Point p = new Point(e.X, e.Y);
            Point o = new Point(154 - (e.X - 154), 154 - (e.Y - 154));
            Color colorOp;
            if (p.X > 0 && p.Y > 0)
            {
                colorOp = b.GetPixel(p.X, p.Y);
            }
            else
            {
                colorOp = Color.Black;
            }

            getRect(g, Pens.Black, o, 3);
            getRect(g, Pens.Black, p, 3);

            if (doColourBoxes)
            {
                getRect(g, Pens.Black, p, baseSize);
                getRect(g, Pens.Black, o, baseSize);
            }

            if (doColourLines)
            {
                g.DrawLine(Pens.Black, p, o);
            }


            pictureBox2.Image = b;
            label7.BackColor = colorOp;

            List<Color> pixels = new List<Color> { };

            for (int i = p.X - baseSize / 2; i < p.X + baseSize / 2; i++)
            {
                for (int f = p.Y - baseSize / 2; f < p.Y + baseSize / 2; f++)
                {
                    if ((i > 0 && f > 0) && (i < 310 && f < 310))
                    {
                        Color cur = b.GetPixel(i, f);
                        pixels.Add(cur);
                    }
                    else
                    {
                        pixels.Add(ct);
                    }
                }
            }

            Bitmap redraw = new Bitmap(baseSize, baseSize);
            Graphics gr = Graphics.FromImage(redraw);

            int count = 0;
            for (int i = 0; i < baseSize; i++)
            {
                for (int f = 0; f < baseSize; f++)
                {
                    count++;
                    Color cur;
                    try
                    {
                        cur = pixels[count];
                    }
                    catch
                    {
                        cur = ct;
                    }

                    gr.DrawRectangle(new Pen(cur), i, f, 1, 1);

                }
            }

            for (int i = 0; i < pixels.Count(); i++)
            {
                if ((pixels[i].R + " " + pixels[i].B + " " + pixels[i].G) == "0 0 0")
                {
                    pixels.RemoveAt(i);
                }

            }

            Color c1 = pixels[rnd.Next(0, pixels.Count())];
            Color c2 = pixels[rnd.Next(0, pixels.Count())];
            Color c3 = pixels[rnd.Next(0, pixels.Count())];

            c1 = brightnessAdjust(c1);
            c2 = brightnessAdjust(c2);
            c3 = brightnessAdjust(c3);

            label8.BackColor = c1;
            label4.BackColor = c2;
            label5.BackColor = c3;

            Color color;

            color = b.GetPixel(o.X + 5, o.Y + 5);
            if (color == Color.Black)
            {
                color = b.GetPixel(o.X - 5, o.Y - 5);
            }

            color = brightnessAdjust(color);

            label9.BackColor = color;

            PRIMARY = c1;
            SECONDARY = c3;
            HIGHLIGHT = color;
            FEET = c3;
            LEGS = c2;
            FACE = color;
            WEIRD = c2;

            gr.DrawRectangle(Pens.Black, 0, 0, baseSize - 1, baseSize - 1);
            pictureBox3.Image = redraw;
        }

        private Color brightnessAdjust(Color c)
        {
            Random rnd = new Random();
            Color modif = c;
            int modR = modif.R;
            int modG = modif.G;
            int modB = modif.B;

            int Rdif = 255 - modR;
            int Gdif = 255 - modB;
            int Bdif = 255 - modG;

            bool swit = (bool)(rnd.NextDouble() < 50 / 100);

            if (swit)
            {
                int RRand = rnd.Next(0, Rdif);
                int GRand = rnd.Next(0, Gdif);
                int BRand = rnd.Next(0, Bdif);

                modif = Color.FromArgb(c.A, c.R + RRand / 2, c.G + GRand / 2, c.B + BRand / 2);
            }
            else
            {
                int RRand = rnd.Next(0, modR);
                int GRand = rnd.Next(0, modG);
                int BRand = rnd.Next(0, modB);

                modif = Color.FromArgb(c.A, c.R - RRand / 2, c.G - GRand / 2, c.B - BRand / 2);
            }

            return modif;
        }

        private void getRect(Graphics drawingArea, Pen penToUse, Point center, int radius)
        {
            Rectangle rect = new Rectangle(center.X - radius, center.Y - radius, radius * 2, radius * 2);
            Point rectP = new Point(rect.X, rect.Y);
            drawingArea.DrawRectangle(penToUse, rect);
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            label6.Text = (trackBar1.Value * 10).ToString();
        }


        private void button7_Click(object sender, EventArgs e)
        {
            doGraphicShit(null);

            string dim = textBox1.Text + "x" + textBox2.Text;
            try
            {
                Thread a = new Thread(() => doPrima(dim, true, true, null));
                a.IsBackground = true;
                a.Start();
            }
            catch
            {
                doPrima("1x1", true, true, null);
            }
        }

        private void pictureBox2_MouseUp(object sender, MouseEventArgs e)
        {
            doGraphicShit(e);

            string dim = textBox1.Text + "x" + textBox2.Text;
            try
            {
                Thread a = new Thread(() => doPrima(dim, true, true, e));
                a.IsBackground = true;
                a.Start();
            }
            catch
            {
                doPrima("1x1", true, true, e);
            }
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            
        }

        private void trackBar1_Scroll_1(object sender, EventArgs e)
        {
            label6.Text = (trackBar1.Value * 10).ToString();
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            Size NoWheel = new Size(805, 464);
            Size YesWheel = new Size(1233, 464);

            if(comboBox1.Text == "Wheel")
            {
                this.Size = YesWheel;
            }
            else
            {
                this.Size = NoWheel;
            }
        }

        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
            doColourBoxes = !doColourBoxes;
        }

        private void checkBox5_CheckedChanged(object sender, EventArgs e)
        {
            doColourLines = !doColourLines;
        }
    }
}

